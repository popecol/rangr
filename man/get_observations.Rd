% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_observations.R
\name{get_observations}
\alias{get_observations}
\title{Observation process}
\usage{
get_observations(
  sim_data,
  sim_results,
  type = c("random_one_layer", "random_all_layers", "from_data", "monitoring_based"),
  sdlog = log(1),
  ...
)
}
\arguments{
\item{sim_data}{\code{sim_data} object from \code{\link{initialise}} containing simulation
parameters}

\item{sim_results}{\code{sim_results} object; returned by \code{\link{sim}} function}

\item{type}{character vector of length 1; describes the sampling type
(case-sensitive):
\itemize{
\item "random_one_layer" - cells from which the population numbers
will be sampled are selected randomly; selected cells will be the same
for all time steps
\item "random_all_layers" - cells from which the abundance will be sampled
are selected randomly; a new set of cells will be selected
for each time step
\item "from_data" - cells for which abundance will be sampled are provided
by the user in a \code{data.frame} with three columns: "x", "y" and "time_step"
\item "monitoring_based" - cells from which abundance will be sampled
are provided by the user in a matrix object with two columns: “x” and “y”;
abundance from given cell is then sampled by different virtual observers
in different time steps; whether a survey will be made by
the same observer for several years and whether it will not be made at all
is defined using a geometric distribution (\code{\link[stats:Geometric]{rgeom}})
}}

\item{sdlog}{numeric vector of length 1; standard deviation (on a log scale)
of the random noise in observation process generated from the log-normal
distribution (\code{\link[stats:Lognormal]{rlnorm}})}

\item{...}{other necessary internal parameters:
\itemize{
\item{\code{prop}

numeric vector of length 1; proportion of cells to be sampled
(default \code{prop = 0.1});
used when \verb{type = "random_one_layer" or "random_all_layers"},}

\item{\code{points}

\code{data.frame} or \code{matrix} with 3 named numeric columns ("x", "y"
and "time_step") containing coordinates and time steps from which
observations should be obtained; used when \code{type = "from_data"},}

\item{\code{cells_coords}

\code{data.frame} or \code{matrix} with 2 named columns: "x" and "y"; survey plots
coordinates; used when \code{type = "monitoring_based"}}

\item{\code{prob}

numeric vector of length 1; a parameter defining the shape of -
\code{\link[stats:Geometric]{rgeom}} distribution - it defines whether an observation
will be made by the same observer for several years and whether it
will not be made at all (default \code{prob = 0.3});
used when \code{type = "monitoring_based"}}

\item{\code{progress_bar}

logical vector of length 1; determines if progress bar for observational
process should be displayed (default \code{progress_bar = FALSE});
used when \code{type = "monitoring_based"}}
}}
}
\value{
\code{data.frame} object with geographic coordinates, time steps,
estimated abundances, including observation error (if \code{sdlog > 0})
and observer identifiers (if \code{type = "monitoring_based"})
}
\description{
This function simulates an observation process. It takes \code{sim_results} object
generated by \code{\link{sim}} function and uses Virtual Ecologist approach on
the \code{N_map} component of this object. As a result a \code{data.frame} with
"observed" abundances is returned.
}
\examples{
\dontrun{

library(terra)
n1_small <- rast(system.file("input_maps/n1_small.tif", package = "rangr"))
K_small <- rast(system.file("input_maps/K_small.tif", package = "rangr"))

# prepare data
sim_data <- initialise(
  n1_map = n1_small,
  K_map = K_small,
  r = log(2),
  rate = 1 / 1e3
)

sim_1 <- sim(obj = sim_data, time = 110, burn = 10)

# 1. random_one_layer
sample1 <- get_observations(
  sim_data,
  sim_1,
  type = "random_one_layer",
  prop = 0.1
)

# 2. random_all_layers
sample2 <- get_observations(
  sim_data,
  sim_1,
  type = "random_all_layers",
  prop = 0.15
)

# 3. from_data
sample3 <- get_observations(
  sim_data,
  sim_1,
  type = "from_data",
  points = observations_points
)

# 4. monitoring_based
# define observations sites
all_points <- xyFromCell(sim_data$id, cells(sim_data$K_map))
sample_idx <- sample(1:nrow(all_points), size = 20)
sample_points <- all_points[sample_idx, ]

sample4 <- get_observations(
  sim_data,
  sim_1,
  type = "monitoring_based",
  cells_coords = sample_points,
  prob = 0.3,
  progress_bar = TRUE
)

# 5. noise
sample5 <- get_observations(sim_data,
  sim_1,
  type = "random_one_layer",
  sdlog = log(1.2)
)
}

}
